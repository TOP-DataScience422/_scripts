demo_data = {
    # не используется в моделировании
    'имя': ['Иван', 'Пётр', 'Артём', 'Сергей', 'Игорь', 'Ярослав', 'Лев'],
    # номинальный категориальный признак
    'город': ['Москва', 'Екатеринбург', 'Москва', 'Иркутск', 'Санкт-Петербург', 'Казань', 'Екатеринбург'],
    # непрервный количественный признак
    'зарплата': [55, 71, 92, 49, 42, 65, 39],
    # непрервный количественный признак
    'сумма': [0.65, 1.25, 4.81, 0.348, 11.2, 3.7, 0.61],
    # непрервный количественный признак
    'процент': [.23, .16, .12, .38, .09, .155, .172],
    # дискретный количественный признак
    'срок': [12, 12, 24, 6, 36, 24, 6],
    # порядковый категориальный признак
    'рейтинг': ['высокий', 'низкий', 'средний', 'высокий', 'средний', 'высокий', 'средний'],
    # порядковый (бинарный, логический) категориальный признак
    'выдан': ['да', 'да', 'нет', 'да', 'нет', 'да', 'нет'],
}

from numpy import int8
from pandas import Series, DataFrame, Categorical

from itertools import count


data = DataFrame(demo_data)
data_encoded = data.copy()

# >>> data
#        имя            город  зарплата   сумма  процент  срок  рейтинг выдан
# 0     Иван           Москва        55   0.650    0.230    12   низкий    да
# 1     Пётр     Екатеринбург        71   1.250    0.160    12  средний    да
# 2    Артём           Москва        92   4.810    0.120    24  средний   нет
# 3   Сергей          Иркутск        49   0.348    0.380     6  высокий    да
# 4    Игорь  Санкт-Петербург        42  11.200    0.090    36  средний   нет
# 5  Ярослав           Казань        65   3.700    0.155    24  высокий    да
# 6      Лев     Екатеринбург        39   0.610    0.172     6   низкий   нет

# >>> data.info()
# <class 'pandas.core.frame.DataFrame'>
# RangeIndex: 7 entries, 0 to 6
# Data columns (total 8 columns):
#  #   Column    Non-Null Count  Dtype
# ---  ------    --------------  -----
#  0   имя       7 non-null      object
#  1   город     7 non-null      object
#  2   зарплата  7 non-null      int64
#  3   сумма     7 non-null      float64
#  4   процент   7 non-null      float64
#  5   срок      7 non-null      int64
#  6   рейтинг   7 non-null      object
#  7   выдан     7 non-null      object
# dtypes: float64(2), int64(2), object(4)
# memory usage: 580.0+ bytes

given_map = {
    'нет': int8(0),
    'да': int8(1),
}
data_encoded['выдан'] = data['выдан'].map(given_map)

# >>> data
#        имя            город  зарплата   сумма  процент  срок  рейтинг  выдан
# 0     Иван           Москва        55   0.650    0.230    12   низкий      1
# 1     Пётр     Екатеринбург        71   1.250    0.160    12  средний      1
# 2    Артём           Москва        92   4.810    0.120    24  средний      0
# 3   Сергей          Иркутск        49   0.348    0.380     6  высокий      1
# 4    Игорь  Санкт-Петербург        42  11.200    0.090    36  средний      0
# 5  Ярослав           Казань        65   3.700    0.155    24  высокий      1
# 6      Лев     Екатеринбург        39   0.610    0.172     6   низкий      0

def count(start=0):
    start = int8(start)
    while True:
        yield start
        start += 1

city_map = dict(zip(data['город'].unique(), count()))

# >>> data['город'].unique()
# array(['Москва', 'Екатеринбург', 'Иркутск', 'Санкт-Петербург', 'Казань'],
#       dtype=object)
# >>> 
# >>> city_map
# {'Москва': 0, 'Екатеринбург': 1, 'Иркутск': 2, 'Санкт-Петербург': 3, 'Казань': 4}

data_encoded['город'] = data['город'].map(city_map)

# >>> data
#        имя  город  зарплата   сумма  процент  срок  рейтинг  выдан
# 0     Иван      0        55   0.650    0.230    12   низкий      1
# 1     Пётр      1        71   1.250    0.160    12  средний      1
# 2    Артём      0        92   4.810    0.120    24  средний      0
# 3   Сергей      2        49   0.348    0.380     6  высокий      1
# 4    Игорь      3        42  11.200    0.090    36  средний      0
# 5  Ярослав      4        65   3.700    0.155    24  высокий      1
# 6      Лев      1        39   0.610    0.172     6   низкий      0

rating_map = Categorical(
    data['рейтинг'],
    ['низкий', 'средний', 'высокий'],
    ordered=True
)

# >>> rating_map
# ['высокий', 'низкий', 'средний', 'высокий', 'средний', 'высокий', 'средний']
# Categories (3, object): ['низкий' < 'средний' < 'высокий']
# >>>
# >>> rating_map.codes
# array([2, 0, 1, 2, 1, 2, 1], dtype=int8)

# >>> Series(rating_map.categories)
# 0     низкий
# 1    средний
# 2    высокий
# dtype: object

data_encoded['рейтинг'] = rating_map

