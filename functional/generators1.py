def test_generator() -> 'generator':
    print('начало выполнения генераторной функции')
    print('первый шаг выполнения генераторной функции')
    yield 3
    print('второй шаг выполнения генераторной функции')
    yield 2
    print('третий шаг выполнения генераторной функции')
    yield 1
    print('четвёртый шаг выполнения генераторной функции')
    yield 0
    print('конец выполнения генераторной функции')


# >>> generator_obj = test_generator()
# >>>
# >>> generator_obj
# <generator object test_generator at 0x000001DE789E56C0>
# >>>
# >>> type(generator_obj)
# <class 'generator'>
# >>>
# >>> generator_obj.__next__()
# начало выполнения генераторной функции
# первый шаг выполнения генераторной функции
# 3
# >>> generator_obj.__next__()
# второй шаг выполнения генераторной функции
# 2
# >>> generator_obj.__next__()
# третий шаг выполнения генераторной функции
# 1
# >>> generator_obj.__next__()
# четвёртый шаг выполнения генераторной функции
# 0
# >>> generator_obj.__next__()
# конец выполнения генераторной функции
# StopIteration
# >>>
# >>> generator_obj.__next__()
# StopIteration
# >>>
# >>> for elem in generator_obj:
# ...     print(elem)
# ...
# >>>
# >>>
# >>> list(generator_obj)
# []


# >>> for elem in test_generator():
# ...     print(elem)
# ...
# начало выполнения генераторной функции
# первый шаг выполнения генераторной функции
# 3
# второй шаг выполнения генераторной функции
# 2
# третий шаг выполнения генераторной функции
# 1
# четвёртый шаг выполнения генераторной функции
# 0
# конец выполнения генераторной функции
# >>>
# >>> list(test_generator())
# начало выполнения генераторной функции
# первый шаг выполнения генераторной функции
# второй шаг выполнения генераторной функции
# третий шаг выполнения генераторной функции
# четвёртый шаг выполнения генераторной функции
# конец выполнения генераторной функции
# [3, 2, 1, 0]

