from numpy import zeros, dot, round as np_round
from numpy.linalg import norm
from numpy.random import default_rng

m, n = 3, 3
V = default_rng().integers(0, 5, size=(m,n))
Q = zeros((m,n))

# пошагово:

# шаг 1
# >>> print(V)
# [[2 1 2]
#  [1 0 3]
#  [1 2 3]]
# >>>
# >>> print(Q)
# [[0. 0. 0.]
#  [0. 0. 0.]
#  [0. 0. 0.]]
# >>> 
# >>> Q[:,0] = V[:,0]
# >>> Q
# array([[2., 0., 0.],
#        [1., 0., 0.],
#        [1., 0., 0.]])
# >>>
# >>> Q[:,0] /= norm(Q[:,0])
# >>> Q
# array([[0.81649658, 0.        , 0.        ],
#        [0.40824829, 0.        , 0.        ],
#        [0.40824829, 0.        , 0.        ]])

# шаг 2
# >>>
# >>> Q[:,1] = V[:,1]
# >>> Q
# array([[0.81649658, 1.        , 0.        ],
#        [0.40824829, 0.        , 0.        ],
#        [0.40824829, 2.        , 0.        ]])
# >>>
# >>> Q[:,1] = Q[:,1] - dot(Q[:,0], Q[:,1]) * Q[:,0]
# >>> Q
# array([[ 0.81649658, -0.33333333,  0.        ],
#        [ 0.40824829, -0.66666667,  0.        ],
#        [ 0.40824829,  1.33333333,  0.        ]])
# >>>
# >>> Q[:,1] /= norm(Q[:,1])
# >>> Q
# array([[ 0.81649658, -0.21821789,  0.        ],
#        [ 0.40824829, -0.43643578,  0.        ],
#        [ 0.40824829,  0.87287156,  0.        ]])

# шаг 3
# >>> V
# array([[2, 1, 2],
#        [1, 0, 3],
#        [1, 2, 3]])
# >>> Q
# array([[ 0.81649658, -0.21821789,  0.        ],
#        [ 0.40824829, -0.43643578,  0.        ],
#        [ 0.40824829,  0.87287156,  0.        ]])
# >>>
# >>> Q[:,2] = v_2 = V[:,2]
# >>> Q
# array([[ 0.81649658, -0.21821789,  2.        ],
#        [ 0.40824829, -0.43643578,  3.        ],
#        [ 0.40824829,  0.87287156,  3.        ]])
# >>>
# целевой вектор
# >>> v_2
# array([2, 3, 3])
# >>>
# опорный вектор 1
# >>> q_0 = Q[:,0]
# >>> q_0
# array([0.81649658, 0.40824829, 0.40824829])
# >>>
# опорный вектор 2
# >>> q_1 = Q[:,1]
# >>> q_1
# array([-0.21821789, -0.43643578,  0.87287156])
# >>>
# >>> dot(v_2, q_0) * q_0
# array([3.33333333, 1.66666667, 1.66666667])
# >>>
# >>> dot(v_2, q_1) * q_1
# array([-0.19047619, -0.38095238,  0.76190476])
# >>>
# >>> Q[:,2] = v_2 - dot(v_2, q_0) * q_0 - dot(v_2, q_1) * q_1
# >>> Q
# array([[ 0.81649658, -0.21821789, -1.14285714],
#        [ 0.40824829, -0.43643578,  1.71428571],
#        [ 0.40824829,  0.87287156,  0.57142857]])
# >>>
# >>> Q[:,2] /= norm(Q[:,2])
# >>> Q
# array([[ 0.81649658, -0.21821789, -0.53452248],
#        [ 0.40824829, -0.43643578,  0.80178373],
#        [ 0.40824829,  0.87287156,  0.26726124]])


# >>> Q.T @ Q
# array([[ 1.00000000e+00, -3.88578059e-16, -1.80411242e-16],
#        [-3.88578059e-16,  1.00000000e+00,  6.10622664e-16],
#        [-1.80411242e-16,  6.10622664e-16,  1.00000000e+00]])
# >>>
# >>> np_round(Q.T @ Q)
# array([[ 1., -0., -0.],
#        [-0.,  1.,  0.],
#        [-0.,  0.,  1.]])


# breakpoint()
for k in range(n):
    Q[:,k] = v_k = V[:,k]
    # ортогонализация
    for j in range(k):
        q_j = Q[:,j]
        Q[:,k] -= dot(v_k, q_j) * q_j
    # нормирование
    Q[:,k] /= norm(Q[:,k])


R = Q.T @ V

# >>> print(V)
# [[3 1 4]
#  [1 2 0]
#  [4 0 3]]
# >>>
# >>> print(Q)
# [[ 0.58834841  0.21052873  0.78072006]
#  [ 0.19611614  0.89953183 -0.39036003]
#  [ 0.78446454 -0.3827795  -0.48795004]]
# >>>
# >>> print(R)
# [[ 5.09901951e+00  9.80580676e-01  4.70678724e+00]
#  [-4.44089210e-16  2.00959238e+00 -3.06223601e-01]
#  [-2.44249065e-15  0.00000000e+00  1.65903012e+00]]
# >>>
# >>> print(np_round(R, 8))
# [[ 5.09901951  0.98058068  4.70678724]
#  [-0.          2.00959238 -0.3062236 ]
#  [-0.          0.          1.65903012]]
# >>>
# >>> Q @ R
# array([[3.0000000e+00, 1.0000000e+00, 4.0000000e+00],
#        [1.0000000e+00, 2.0000000e+00, 8.8817842e-16],
#        [4.0000000e+00, 0.0000000e+00, 3.0000000e+00]])
# >>>
# >>> np_round(Q @ R)
# array([[3., 1., 4.],
#        [1., 2., 0.],
#        [4., 0., 3.]])
# >>>
# >>> np_round(Q @ R) == V
# array([[ True,  True,  True],
#        [ True,  True,  True],
#        [ True,  True,  True]])


from numpy.linalg import qr

Q_, R_ = qr(V)

